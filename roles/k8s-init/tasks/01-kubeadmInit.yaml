- name: Open Firewall Ports (1/8) [Kubernetes API server]
  ansible.posix.firewalld:
   port: 6443/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (2/8) [Kubelet API]
  ansible.posix.firewalld:
   port: 10250/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (3/8) [etcd server client API]
  ansible.posix.firewalld:
   port: 2379/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (4/8) [etcd server client API]
  ansible.posix.firewalld:
   port: 2380/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (5/8) [kube-scheduler]
  ansible.posix.firewalld:
   port: 10251/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (6/8) [kube-controller-manager]
  ansible.posix.firewalld:
   port: 10252/tcp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (7/8) [Flannel]
  ansible.posix.firewalld:
   port: 8472/udp
   permanent: true
   immediate: true
   state: enabled
- name: Open Firewall Ports (8/8) [Flannel]
  ansible.posix.firewalld:
   port: 8285/udp
   permanent: true
   immediate: true
   state: enabled
  
- name: Firewall masquerade
  ansible.posix.firewalld:
    masquerade: true
    state: enabled
    zone: public
    permanent: true
    immediate: true

- name: Check Component Status
  become: false
  ansible.builtin.command:
   cmd: kubectl get cs
  register: kubecs
  ignore_errors: true
  no_log: true
  changed_when: false

- name: Kubeadm init
  ansible.builtin.command:
   cmd: "kubeadm init --apiserver-advertise-address={{ ansible_ssh_host }} --control-plane-endpoint={{ ansible_ssh_host }} --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/crio/crio.sock"
  changed_when: true
  when: '"refused" in kubecs.stderr'

- name: Create kube dir in home
  ansible.builtin.file:
   path: "/home/{{user}}/.kube"
   state: directory
   owner: "{{user}}"
   mode: '0755'
  when: '"refused" in kubecs.stderr'
- name: Wait for kube config to exist
  ansible.builtin.wait_for:
   path: /etc/kubernetes/admin.conf
  when: '"refused" in kubecs.stderr'
- name: Copy kube config
  ansible.builtin.copy:
   src: /etc/kubernetes/admin.conf
   remote_src: true
   dest: "/home/{{user}}/.kube/config"
   owner: "{{user}}"
   mode: '0644'
  when: '"refused" in kubecs.stderr'
- name: Wait for safety
  ansible.builtin.pause:
   seconds: 15
- name: Create ADM Init config
  ansible.builtin.shell:
   cmd: kubeadm config print init-defaults > /home/{{user}}/.kube/kubeadm.yaml
   creates: /home/{{user}}/.kube/kubeadm.yaml
  changed_when: false

# Disabled as non-functional
# - name: Get Control Join Command
#   ansible.builtin.shell:
#    cmd: echo $(kubeadm token create --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs --config /home/{{user}}/.kube/kubeadm.yaml | grep -vw -e certificate -e Namespace)
#   register: kubeadmcontroljoin
#   ignore_errors: true
#   changed_when: false
# - name: "Add K8S Token and Hash to dummy host"
#   ansible.builtin.add_host:
#    name: "K8S_JOIN_CONTROL_COMMAND"
#    cmd: "{{ kubeadmcontroljoin.stdout }}"
# - name: Echo join string
#   ansible.builtin.debug:
#    msg: "{{ hostvars['K8S_JOIN_CONTROL_COMMAND']['cmd'] }}"