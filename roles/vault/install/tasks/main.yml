---
# tasks file for vault/install

# Always replace cert in case it's been updated
# - name: Get CA Crt Secret
#   ansible.builtin.shell:
#     cmd: "kubectl get secret {{ certificateSecretName | mandatory }} -n {{ certificateSecretNamespace | mandatory }} -o jsonpath='{.data}' | jq -r '.\"tls.crt\"' | base64 -d"
#   register: ca_crt_from_secret
#   environment:
#     KUBECONFIG: "/home/{{user|mandatory}}/.kube/config"

# - name: Get CA Key Secret
#   ansible.builtin.shell:
#     cmd: "kubectl get secret {{ certificateSecretName | mandatory }} -n {{ certificateSecretNamespace | mandatory }} -o jsonpath='{.data}' | jq -r '.\"tls.key\"' | base64 -d"
#   register: ca_key_from_secret
#   environment:
#     KUBECONFIG: "/home/{{user|mandatory}}/.kube/config"

# - name: Create crt file
#   ansible.builtin.copy:
#     content: "{{ ca_crt_from_secret.stdout }}"
#     dest: "/home/{{user}}/{{ certificateName | mandatory }}.crt"

# - name: Create key file
#   ansible.builtin.copy:
#     content: "{{ ca_key_from_secret.stdout }}"
#     dest: "/home/{{user}}/{{ certificateName | mandatory }}.key"

# - name: Create PEM out of CRT
#   ansible.builtin.command:
#     cmd: openssl x509 -in /home/{{user}}/{{ certificateName | mandatory }}.crt -out /home/{{user}}/tls-ca.crt

# - name: Create PEMkey out of Key
#   ansible.builtin.shell:
#     cmd: openssl rsa -in /home/{{user}}/{{ certificateName | mandatory }}.key -text > /home/{{user}}/tls-ca.key

# - name: Delete existing secret for new CA cert
#   k8s:
#     api_version: v1
#     kind: secret
#     namespace: "{{ k8sNamespaceName }}"
#     name:  vault-ca-crt
#     state: absent
#   environment:
#     KUBECONFIG: "/home/{{user}}/.kube/config"

# - name: Create Vault CA Cert Secret
#   ansible.builtin.command:
#     cmd: kubectl --namespace='{{ k8sNamespaceName }}' create secret tls vault-ca-crt --cert /home/{{user}}/tls-ca.crt --key /home/{{user}}/tls-ca.key
#   environment:
#     KUBECONFIG: "/home/{{user}}/.kube/config"

# - name: Create Cert creation file
#   ansible.builtin.copy:
#     content: "{{ openSSLConf | mandatory }}"
#     dest: "/home/{{user}}/openssl.cnf"

# - name: Create Vault Server CSR
#   ansible.builtin.command:
#     cmd: |
#       openssl req -new -sha256 -newkey rsa:2048 -config /home/{{user}}/openssl.cnf -nodes -out /home/{{user}}/vault.csr -keyout /home/{{user}}/vault.key -outform PEM

# - name: Create Vault Server cert
#   ansible.builtin.command:
#     cmd: |
#       openssl x509 -req -days 10000 -in /home/{{user}}/vault.csr -out /home/{{user}}/vault.pem -CA /home/{{user}}/tls-ca.crt -CAkey /home/{{user}}/tls-ca.key -CAcreateserial -extfile /home/{{user}}/openssl.cnf -extensions SAN

# - name: Create PEMkey out of Server Key
#   ansible.builtin.shell:
#     cmd: openssl rsa -in /home/{{user}}/vault.key -text > /home/{{user}}/vault-key.pem

# - name: Delete existing secret for new server cert
#   k8s:
#     api_version: v1
#     kind: secret
#     namespace: "{{ k8sNamespaceName }}"
#     name:  vault-server-crt
#     state: absent
#   environment:
#     KUBECONFIG: "/home/{{user}}/.kube/config"

# - name: Create Vault Server Cert Secret
#   ansible.builtin.command:
#     cmd: kubectl --namespace='{{ k8sNamespaceName }}' create secret tls vault-server-crt --cert /home/{{user}}/vault.pem --key /home/{{user}}/vault-key.pem
#   environment:
#     KUBECONFIG: "/home/{{user}}/.kube/config"


- name: Add helm repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com/

- name: Create a vault namespace
  kubernetes.core.k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ k8sNamespaceName }}"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged
  environment:
    KUBECONFIG: "/home/{{user}}/.kube/config"

- name: Install vault
  kubernetes.core.helm:
    name: vault
    namespace: "{{ k8sNamespaceName }}"
    chart_ref: hashicorp/vault
    chart_version: "{{ helmChartVersion }}"
    values: "{{ helmValues }}"
  environment:
    KUBECONFIG: "/home/{{user}}/.kube/config"


- name: Wait 45 seconds for safety (DNS has to stand up)
  ansible.builtin.pause:
    seconds: 45

# If unseal secret doesn't exist
- name: Register if unseal secret exists
  ansible.builtin.command:
    cmd: kubectl get secret --namespace='{{ k8sNamespaceName }}' unseal-keys --ignore-not-found
  register: unseal_secret_get
  environment:
    KUBECONFIG: "/home/{{user}}/.kube/config"

- block:

  - name: Init Vault-0
    ansible.builtin.command:
      cmd: kubectl exec --stdin=true --tty=true --namespace='{{ k8sNamespaceName }}' vault-0 -- vault operator init
    register: init_output
    environment:
      KUBECONFIG: "/home/{{user}}/.kube/config"
    
  - name: Create output file
    ansible.builtin.copy:
      content: "{{ init_output.stdout }}"
      dest: "/home/{{user}}/vault_keys.txt"

  - name: Ensures dir exists
    delegate_to: localhost
    file: 
      path: "~/ansible_outputs"
      state: directory

  - name: Fetch files
    ansible.builtin.fetch:
      src: /home/{{user}}/vault_keys.txt
      dest: ~/fetched

  - name: Remove old file
    delegate_to: localhost
    ansible.builtin.file:
      path: ~/ansible_outputs/vault_keys.txt
      state: absent

  - name: Move the file
    delegate_to: localhost
    ansible.builtin.shell:
      cmd: mv ~/fetched/{{ ansible_hostname }}/home/rts-k8s/vault_keys.txt ~/ansible_outputs/vault_keys.txt
    changed_when: true

  - name: Register Unseal Key 1
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 1: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_1

  - name: Register Unseal Key 2
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 2: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_2

  - name: Register Unseal Key 3
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 3: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_3

  - name: Register Unseal Key 4
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 4: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_4

  - name: Register Unseal Key 5
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 5: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_5

  - name: Register Root Key
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Initial Root Token: (.*)\\x{001b}/ && print $1'"
    register: root_token

  - name: seal
    ansible.builtin.debug:
      msg: "{{unseal_key_1.stdout}}"

  - name: Create unseal secret
    kubernetes.core.k8s:
      state: present
      definition:
        api_version: v1
        kind: Secret
        metadata:
          name: unseal-keys
          namespace: "{{ k8sNamespaceName }}"
        type: Opaque
        data:
          unseal1.key: "{{ unseal_key_1.stdout | b64encode}}"
          unseal2.key: "{{ unseal_key_2.stdout | b64encode}}"
          unseal3.key: "{{ unseal_key_3.stdout | b64encode}}"
          unseal4.key: "{{ unseal_key_4.stdout | b64encode}}"
          unseal5.key: "{{ unseal_key_5.stdout | b64encode}}"
          root.token: "{{ root_token.stdout | b64encode}}"
    environment:
      KUBECONFIG: "/home/{{user|mandatory}}/.kube/config"  

  - name: Remove temp file
    ansible.builtin.file:
      path: "/home/{{user}}/vault_keys.txt"
      state: absent

  - name: Remove fetched directory
    delegate_to: localhost
    ansible.builtin.file:
      path: ~/fetched
      state: absent

  when:
    - unseal_secret_get.stdout | length == 0 # only do this block when the secret doesn't already exist

- name: Apply Certificate
  kubernetes.core.k8s:
    state: present
    definition: "{{certificateDefinition | mandatory}}"

- name: Apply Ingress
  kubernetes.core.k8s:
    state: present
    definition: "{{ingressDefinition | mandatory}}"

# - name: Apply Token Reviewer CRDs
#   kubernetes.core.k8s:
#     state: present
#     definition: "{{tokenReviewerDefinitions | mandatory}}"

# - name: Remove temp cert files
#   ansible.builtin.file:
#     path: /home/{{user}}/{{ item }}
#     state: absent
#   loop:
#     - "{{ certificateName | mandatory }}.crt"
#     - "{{ certificateName | mandatory }}.key"
#     - "tls-ca.crt"
#     - "tls-ca.srl"
#     - "tls-ca.key"
#     - "openssl.cnf"
#     - "vault.conf"
#     - "vault.key"
#     - "vault.csr"
#     - "vault.pem"
#     - "vault-key.pem"