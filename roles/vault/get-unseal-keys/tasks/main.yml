---
# tasks file for get-unseal-keys

- name: Register if unseal secret exists
  ansible.builtin.command:
    cmd: kubectl get secret --namespace='{{ k8sNamespaceName | mandatory }}' unseal-keys --ignore-not-found
  register: unseal_secret_get
  environment:
    KUBECONFIG: "/home/{{user}}/.kube/config"

- block:

  - name: Init Vault-0
    ansible.builtin.command:
      cmd: kubectl exec --stdin=true --tty=true --namespace='{{ k8sNamespaceName | mandatory }}' hashicorp-vault-0 -- vault operator init
    register: init_output
    environment:
      KUBECONFIG: "/home/{{user}}/.kube/config"
    
  - name: Create output file
    ansible.builtin.copy:
      content: "{{ init_output.stdout }}"
      dest: "/home/{{user}}/vault_keys.txt"

  - name: Ensures dir exists
    delegate_to: localhost
    file: 
      path: "~/ansible_outputs"
      state: directory

  - name: Fetch files
    ansible.builtin.fetch:
      src: /home/{{user}}/vault_keys.txt
      dest: ~/fetched

  - name: Remove old file
    delegate_to: localhost
    ansible.builtin.file:
      path: ~/ansible_outputs/vault_keys.txt
      state: absent

  - name: Move the file
    delegate_to: localhost
    ansible.builtin.shell:
      cmd: mv ~/fetched/{{ ansible_hostname }}/home/rts-k8s/vault_keys.txt ~/ansible_outputs/vault_keys.txt
    changed_when: true

  - name: Register Unseal Key 1
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 1: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_1

  - name: Register Unseal Key 2
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 2: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_2

  - name: Register Unseal Key 3
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 3: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_3

  - name: Register Unseal Key 4
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 4: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_4

  - name: Register Unseal Key 5
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Unseal Key 5: (.*)\\x{001b}/ && print $1'"
    register: unseal_key_5

  - name: Register Root Key
    ansible.builtin.shell:
      cmd: "cat /home/{{user}}/vault_keys.txt | perl -n -e'/Initial Root Token: (.*)\\x{001b}/ && print $1'"
    register: root_token

  - name: Create unseal secret
    kubernetes.core.k8s:
      state: present
      definition:
        api_version: v1
        kind: Secret
        metadata:
          name: unseal-keys
          namespace: "{{ k8sNamespaceName | mandatory }}"
        type: Opaque
        data:
          unseal1.key: "{{ unseal_key_1.stdout | b64encode}}"
          unseal2.key: "{{ unseal_key_2.stdout | b64encode}}"
          unseal3.key: "{{ unseal_key_3.stdout | b64encode}}"
          unseal4.key: "{{ unseal_key_4.stdout | b64encode}}"
          unseal5.key: "{{ unseal_key_5.stdout | b64encode}}"
          root.token: "{{ root_token.stdout | b64encode}}"
    environment:
      KUBECONFIG: "/home/{{user|mandatory}}/.kube/config"  

  - name: Remove temp file
    ansible.builtin.file:
      path: "/home/{{user}}/vault_keys.txt"
      state: absent

  - name: Remove fetched directory
    delegate_to: localhost
    ansible.builtin.file:
      path: ~/fetched
      state: absent

  when:
    - unseal_secret_get.stdout | length == 0 # only do this block when the secret doesn't already exist
